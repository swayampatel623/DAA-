import java.util.*;

public class MergeSort {

public static void merge(int arr[], int left, int mid, int right) { int n1 = mid - left + 1;

int n2 = right - mid; int L[] = new int[n1]; int R[] = new int[n2];

for (int i = 0; i < n1; i++) L[i] = arr[left + i];

for (int j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];

int i = 0, j = 0; int k = left;

while (i < n1 && j < n2) { if (L[i] <= R[j]) {

arr[k] = L[i]; i++;

} else {

arr[k] = R[j]; j++;

} k++;

}

while (i < n1) { arr[k] = L[i]; i++;



k++;

}

while (j < n2) { arr[k] = R[j]; j++;

k++;

}

}

public static void sort(int arr[], int beg, int end) { if (beg < end) {

int mid = (beg + end) / 2; sort(arr, beg, mid); sort(arr, mid + 1, end); merge(arr, beg, mid, end);

}

}

public static void Display(int arr[]) { for (int i = 0; i < arr.length; i++) {

System.out.print(arr[i] + " ");

}

System.out.println();

}

public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println("Choose the case:"); System.out.println("1.Best Case"); System.out.println("2.Average case"); System.out.println("3. Worst Case"); int choice = sc.nextInt();

int size = 100;

int arr[] = new int[size]; switch (choice) {



case 1:

for (int i = 0; i < size; i++) { arr[i] = i + 1;

}

System.out.println("Best Case:"); break;

case 2:

Random rand = new Random(); for (int i = 0; i < size; i++) {

arr[i] = rand.nextInt(100);

}

System.out.println("Average Case:"); break;

case 3:

for (int i = 0; i < size; i++) { arr[i] = size - i;

}

System.out.println("Worst Case:"); break;

default:

System.out.println("Invalid choice!"); return;

}

Display(arr);

long startTime = System.nanoTime(); sort(arr, 0, arr.length - 1);

long endTime = System.nanoTime(); Display(arr);

long duration = endTime - startTime; System.out.println("Start time: " + startTime); System.out.println("End time: " + endTime);

System.out.println("Time taken to sort: " + duration / 1000000.0 + " milliseconds");



}

}
